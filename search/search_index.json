{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Yirigaa_NLP","text":""},{"location":"#description","title":"Description","text":"<p>Yirigaa_NLP is a repository for my major project on Natural Language Processing.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#1-clone-the-repository","title":"1. Clone the repository:","text":"<p><code>bash    git clone https://github.com/dannguyen99/Yirigaa_NLP</code></p>"},{"location":"#2-install-dependencies","title":"2. Install dependencies:","text":"<p><code>bash    pip install -r requirements.txt</code></p>"},{"location":"#3-set-up-your-openai-api-key","title":"3. Set up your OpenAI API key:","text":"<ul> <li>Obtain an API key from https://beta.openai.com/account/api-keys</li> <li>Set up your API key https://platform.openai.com/docs/quickstart/step-2-set-up-your-api-key</li> </ul> <p>On MacOs:</p> <ul> <li> <p>Export the key as an environment variable <code>OPENAI_API_KEY</code>:</p> <p><code>bash  export OPENAI_API_KEY=your_api_key</code></p> </li> </ul>"},{"location":"#4-build-the-project","title":"4. Build the project:","text":"<pre><code>pip install -e .\n</code></pre>"},{"location":"#5-run-redis-and-rq-worker","title":"5. Run Redis and RQ Worker:","text":"<pre><code>redis-server\nrq worker --with-scheduler\n</code></pre>"},{"location":"act/","title":"ACT","text":""},{"location":"act/#description","title":"Description","text":"<p>This folder contains the files and resources related to the ACT (Answer_based_Tree) project.</p>"},{"location":"act/#constructing-answer-based-tree-act","title":"Constructing Answer-based Tree (ACT)","text":""},{"location":"act/#each-node-attributes","title":"Each node attributes:","text":"<ul> <li>ID</li> <li>Type</li> <li>Text</li> <li>Goal</li> </ul>"},{"location":"act/#node-type","title":"Node Type:","text":"<ul> <li>Paragraph</li> <li>Section</li> <li>Root</li> </ul>"},{"location":"act/#algorithm","title":"Algorithm:","text":"<pre><code>Constructing_Answer_based_Tree(ACT, Answer) {\n    Input: Answer\n    Output: ACT tree\n\n    Create an empty ACT tree with a root node R with Null values\n    Expand ACT in such way that {\n        all internal nodes are related to the section or subsection\n        child nodes of a section node are subsections of the section or are paragraphs or captions in that section related to the section\n        all leaf nodes are related to paragraphs to caption\n        text of internal node is the title of the section\n        text of a leaf node is paragraph or section\n        For all leaf nodes N that are paragraphs, N.Goal = LLM_Pragraph_Main_Goal(N.Text)\n        For all leaf nodes N that are captions, N.Goal is a summary of the caption\n        For all internal node N, N.Goal =\n    }\n}\n</code></pre>"},{"location":"act/#getting-started","title":"Getting Started","text":""},{"location":"act/#1-clone-the-repository","title":"1. Clone the repository:","text":"<p><code>bash    git clone https://github.com/dannguyen99/Yirigaa_NLP</code></p>"},{"location":"act/#2-install-dependencies","title":"2. Install dependencies:","text":"<p><code>bash    pip install -r requirements.txt</code></p>"},{"location":"act/#3-set-up-your-openai-api-key","title":"3. Set up your OpenAI API key:","text":"<ul> <li>Obtain an API key from https://beta.openai.com/account/api-keys</li> <li>Set up your API key https://platform.openai.com/docs/quickstart/step-2-set-up-your-api-key</li> </ul> <p>On MacOs:</p> <ul> <li> <p>Export the key as an environment variable <code>OPENAI_API_KEY</code>:</p> <p><code>bash  export OPENAI_API_KEY=your_api_key</code></p> </li> </ul>"},{"location":"act/#4-run-the-flask-api","title":"4. Run the Flask API:","text":"<p><code>bash    python3 -m src.API.app</code></p>"},{"location":"act/#5-access-the-api-in-your-browser","title":"5. Access the API in your browser:","text":"<ol> <li> <p>Open your web browser (e.g., Chrome, Firefox, Safari).</p> </li> <li> <p>In the address bar, type: <code>http://127.0.0.1:5000/build-act</code></p> </li> <li> <p>Press Enter or Return to load the API endpoint.</p> </li> </ol>"},{"location":"act/#usage","title":"Usage","text":"<p>1. Upload a PDF report to the API system</p> <p></p> <p>2. The output tree will be store at the file ** uploaded file name.json</p> <p>Example</p> <p>1. JSON tree</p> <p></p> <p>2. Tree Visualize</p> <p></p>"},{"location":"act/#project-structure","title":"Project Structure","text":"<ul> <li><code>src/</code></li> <li><code>act.py</code>: (Main ACT tree logic)</li> <li><code>act_api.py</code>:  (Flask API implementation)</li> <li><code>assistant.py</code>: (Interaction with OpenAI GPT-3)</li> <li><code>pdf_utils.py</code>:  (PDF processing functions)</li> <li><code>sample_act.json</code>: (Example input ACT data)</li> <li><code>sample_act_tree.py</code>: (Example script to demonstrate ACT tree building)</li> <li><code>act_tree.png</code>: (Optional - an image visualizing an ACT tree structure)</li> <li><code>requirements.txt</code>: (List of project dependencies)</li> </ul>"},{"location":"api/","title":"API","text":"<p>API Module Documentation</p>"},{"location":"api/#api-module-apppy","title":"API Module (<code>app.py</code>)","text":"<p>The API module provides a Flask-based web interface for interacting with the ACT functionality. It serves as a bridge between the user (or another software system) and the core ACT processing logic.</p>"},{"location":"api/#endpoints","title":"Endpoints","text":"<ul> <li><code>/build-act</code> (GET, POST):</li> <li>GET: Renders an HTML form for uploading a file.</li> <li>POST:<ol> <li>Receives a PDF or text file as input.</li> <li>Builds an ACT tree from the file's content.</li> <li>Saves the ACT tree as a JSON file in a designated directory.</li> <li>Enqueues a sample job for further processing (this is currently commented out in the code).</li> <li>Returns the JSON representation of the ACT tree to the user.</li> </ol> </li> <li><code>/job</code> (GET, POST):</li> <li>GET: Renders an HTML form for inputting a string.</li> <li>POST:<ol> <li>Receives an input string.</li> <li>Enqueues a sample job for processing the string.</li> <li>Returns a confirmation message that the job has been enqueued.</li> </ol> </li> <li><code>/text-validity-check</code> (GET, POST):</li> <li>GET: Renders an HTML form for uploading a file.</li> <li>POST:<ol> <li>Receives a PDF or text file as input.</li> <li>Extracts sections from the file's content.</li> <li>Validates the hierarchical order of the sections.</li> <li>Returns a message indicating whether the text is valid or not.</li> </ol> </li> </ul>"},{"location":"api/#interactions-act_apipy-softwarepy","title":"Interactions (act_api.py &lt;-&gt; software.py)","text":"<ul> <li>The <code>act_api.py</code> module provides a user interface for uploading a file and initiating the ACT building process.</li> <li>When the user uploads a PDF file through the <code>/build-act</code> endpoint, the <code>act_api.py</code> module saves the file to the <code>uploads/act</code> folder.</li> <li>It then makes a POST request to the <code>software.py</code> module's <code>/software/act</code> endpoint, sending the uploaded file along.</li> <li>The <code>software.py</code> module receives the file, processes it, builds the ACT tree, and returns the JSON representation of the tree back to <code>act_api.py</code>.</li> <li>Finally, <code>act_api.py</code> returns this JSON response to the user.</li> </ul>"},{"location":"api/#dependencies","title":"Dependencies","text":"<ul> <li>Flask: A micro web framework for building web applications in Python.</li> <li>werkzeug: A WSGI utility library used for handling file uploads securely.</li> <li>pathlib: A module for working with file paths.</li> <li>ACT.src.act: The module containing the core ACT building and manipulation logic.</li> <li>ACT.src.text_validity_check: The module responsible for validating the structure of the input text.</li> <li>job.sample_job: The module containing sample job functions.</li> </ul> <p>Note: Remember to replace the placeholder file paths and URLs in the <code>software.py</code> script with your actual file paths and URLs.</p>"},{"location":"api/#software-module-documentation-softwarepy","title":"Software Module Documentation (<code>software.py</code>)","text":"<p>The <code>software.py</code> module provides the backend functionality for processing PDF files, building ACT trees, and handling webhook requests related to ACT data.</p>"},{"location":"api/#endpoints_1","title":"Endpoints","text":"<ul> <li><code>/software/act</code> (POST):<ol> <li>Receives a PDF or text file from <code>act_api.py</code>.</li> <li>Processes the file.</li> <li>Builds an ACT tree.</li> <li>Returns the JSON representation of the ACT tree back to <code>act_api.py</code>.</li> </ol> </li> <li><code>/software/act_webhook</code> (POST):<ol> <li>Receives a JSON representation of an ACT tree.</li> <li>Processes the tree.</li> <li>Returns a JSON message indicating success or error in processing.</li> </ol> </li> </ul>"},{"location":"job/","title":"Job","text":""},{"location":"job/#job-module","title":"Job Module","text":"<p>This module provides functionality for managing background jobs within your application. It relies on the following libraries:</p> <ul> <li>Redis: An in-memory data store used as a message broker for the job queue.</li> <li>RQ (Redis Queue): A simple Python library for queueing jobs and processing them in the background.</li> </ul>"},{"location":"job/#functions","title":"Functions","text":""},{"location":"job/#sample_job_that_run_for_10_secondsinput_str-str","title":"<code>sample_job_that_run_for_10_seconds(input_str: str)</code>","text":"<p>This is a sample job function that demonstrates how to create a job that runs in the background.</p> <ul> <li> <p>Functionality:</p> <ul> <li>Simulates a 10-second task.</li> <li>Logs the start and completion of the job using the <code>Log</code> class.</li> <li>Makes a POST request to an external webhook (replace with your actual webhook URL) after completion.</li> </ul> </li> <li> <p>Parameters:</p> <ul> <li><code>input_str</code> (str): The input string for the job (not used in this sample, but you can pass data to your custom job functions).</li> </ul> </li> <li> <p>Returns:</p> <ul> <li>A string indicating the job has completed.</li> </ul> </li> </ul>"},{"location":"job/#enqueue_sample_jobinput_str-str","title":"<code>enqueue_sample_job(input_str: str)</code>","text":"<p>This function enqueues the <code>sample_job_that_run_for_10_seconds</code> job into the default RQ queue.</p> <ul> <li> <p>Functionality:</p> <ul> <li>Connects to the Redis server.</li> <li>Enqueues the job with the given input string.</li> <li>Logs that the job has been enqueued.</li> </ul> </li> <li> <p>Parameters:</p> <ul> <li><code>input_str</code> (str): The input string for the job.</li> </ul> </li> <li> <p>Returns:</p> <ul> <li>A string confirming that the job has been enqueued.</li> </ul> </li> </ul>"},{"location":"job/#how-to-use","title":"How to Use","text":"<p>1. Start Redis and the RQ Worker:</p> <p>Open a terminal and run the following commands:</p> <pre><code>redis-server\nrq worker --with-scheduler\n</code></pre> <ul> <li><code>redis-server</code>: Starts the Redis server, which will act as the backend for the job queue.</li> <li><code>rq worker --with-scheduler</code>: This command launches an RQ worker process that will process jobs from the queue.</li> </ul> <p>2. Start the RQ Dashboard (Optional):</p> <p>In a separate terminal, you can run:</p> <pre><code>rq-dashboard\n</code></pre> <ul> <li>This command launches a web interface for monitoring the status of your queues and jobs.</li> </ul> <p>3. Enqueue Jobs:</p> <p>In your main Python code, import the <code>enqueue_sample_job</code> function and use it to enqueue jobs as needed:</p> <pre><code>from job import enqueue_sample_job\n\n# Example:\ninput_text = \"your_input_string\"\nenqueue_sample_job(input_text)\n</code></pre> <p>4. Run the webserver:</p> <p>You can run the webserver by typing this command:</p> <pre><code>flask --app act_api run --debug\n</code></pre> <p>Key Points</p> <ul> <li>Flexibility: You can replace <code>sample_job_that_run_for_10_seconds</code> with your own job functions to execute any background tasks.</li> <li>Customization: The provided example is basic. Tailor it to your specific project needs.</li> <li>Scaling: RQ and Redis allow you to easily scale your job processing if you have a large volume of tasks.</li> </ul>"},{"location":"log/","title":"Log Module","text":"<p>This module provides a simplified interface for logging messages in the Python application. It utilizes the standard Python <code>logging</code> module under the hood.</p>"},{"location":"log/#class-log","title":"Class: <code>Log</code>","text":"<p>The <code>Log</code> class is responsible for creating and configuring a logger object.  It offers convenient methods for logging at different levels of severity.</p>"},{"location":"log/#constructor-__init__self-project_name-str-log_file-str-applog","title":"Constructor (<code>__init__(self, project_name: str, log_file: str = \"app.log\")</code>)","text":"<p>Creates a <code>Log</code> instance.</p> <ul> <li><code>project_name</code> (str): The name of your project or module. Used to categorize log entries.</li> <li><code>log_file</code> (str, optional): The name of the log file. Defaults to \"app.log\" and is created in the \"logs\" directory.</li> </ul>"},{"location":"log/#methods","title":"Methods","text":"<ul> <li><code>debug(self, message: str)</code>:  Logs a debug-level message.</li> <li><code>info(self, message: str)</code>: Logs an info-level message.</li> <li><code>warning(self, message: str)</code>:  Logs a warning-level message.</li> <li><code>error(self, message: str)</code>: Logs an error-level message.</li> <li><code>critical(self, message: str)</code>:  Logs a critical-level message.</li> </ul>"},{"location":"log/#log-levels","title":"Log Levels","text":"<p>The logging levels correspond to the severity of the message:</p> <ul> <li>DEBUG: Detailed information, typically for debugging purposes.</li> <li>INFO:  General informational messages.</li> <li>WARNING:  Potential issues or situations that require attention.</li> <li>ERROR:  Errors that affect the functionality of the application.</li> <li>CRITICAL:  Severe errors that may cause the application to crash.</li> </ul>"},{"location":"log/#example-usage","title":"Example Usage","text":"<pre><code>from log import Log\n\nlogger = Log(\"my_module\")  # Create a logger for a module\nlogger.info(\"Starting data processing...\")\nlogger.warning(\"Potential issue detected, investigating...\")\n\ntry:\n    # Your code that might raise an exception\nexcept Exception as e:\n    logger.error(f\"An error occurred: {e}\")\n</code></pre>"}]}